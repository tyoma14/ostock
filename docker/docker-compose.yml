version: '2.1'
services:
  database:
    image: postgres:latest
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB:       "ostock_dev"
    volumes:
        - ./init.sql:/docker-entrypoint-initdb.d/1-init.sql
        - ./data.sql:/docker-entrypoint-initdb.d/2-data.sql
    networks:
      backend:
        aliases:
          - "database"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  configserver:
    image: ostock/configserver:0.0.1-SNAPSHOT
    ports:
       - "8888:8888"
    networks:
      backend:
        aliases:
          - "configserver"
  eurekaserver:
    image: ostock/eureka-server:0.0.1-SNAPSHOT
    environment:
      CONFIGSERVER_URI: "http://configserver:8888"
    ports:
      - "8070:8070"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "eurekaserver"
  gatewayserver:
    image: ostock/gatewayserver:0.0.1-SNAPSHOT
    ports:
      - "8072:8072"
    environment:
      PROFILE: "default"
      SERVER_PORT: "8072"
      CONFIGSERVER_URI: "http://configserver:8888"
      CONFIGSERVER_PORT: "8888"
      EUREKASERVER_URI: "http://eurekaserver:8070/eureka/"
      EUREKASERVER_PORT: "8070"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
      eurekaserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "gateway"
  licensingservice:
    image: ostock/licensing-service:0.0.3-SNAPSHOT
    environment:
      PROFILE: "dev"
      CONFIGSERVER_URI: "http://configserver:8888"
      CONFIGSERVER_PORT:   "8888"
      DATABASESERVER_PORT: "5432"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
      zipkin:
        condition: service_started
      logstash:
        condition: service_started
    ports:
      - "8180:8080"
    networks:
      - backend
  organizationservice:
    image: ostock/organization-service:0.0.1-SNAPSHOT
    environment:
      PROFILE: "dev"
      CONFIGSERVER_URI: "http://configserver:8888"
      CONFIGSERVER_PORT: "8888"
      DATABASESERVER_PORT: "5432"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
      zipkin:
        condition: service_started
      logstash:
        condition: service_started
    ports:
      - "8081:8081"
    networks:
      - backend
  keycloak:
    image: keycloak/keycloak
    entrypoint: "/opt/keycloak/bin/kc.sh start-dev"
    restart: always
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
      KC_DB_URL_HOST: database
    depends_on:
      database:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      backend:
        aliases:
          - "keycloak"
  kafkaserver:
    image: apache/kafka:4.0.0
    ports:
      - "9092:9092"
    networks:
      backend:
        aliases:
          - "kafka"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
  redisserver:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      backend:
        aliases:
          - "redis"
  logstash:
    image: logstash:9.1.2
    ports:
      - "5000:5000"
    command: logstash -f /etc/logstash/conf.d/logstash.conf
    volumes:
      - ./config:/etc/logstash/conf.d
    networks:
      backend:
        aliases:
          - "logstash"
    depends_on:
      - elasticsearch
  elasticsearch:
    image: elasticsearch:9.1.2
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - "9300:9300"
      - "9200:9200"
    networks:
      backend:
        aliases:
          - "elasticsearch"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    mem_limit: 1GB
  kibana:
    image: kibana:9.1.2
    ports:
      - "5601:5601"
    networks:
      backend:
        aliases:
          - "kibana"
    depends_on:
      - elasticsearch
    environment:
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
  zipkin:
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    networks:
      backend:
        aliases:
          - "zipkin"
networks:
  backend:
    driver: bridge
volumes:
  esdata1: